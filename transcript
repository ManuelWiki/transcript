#include <vector>
#include <functional>

template <class T>
struct PredBuilder{
private:
    using Pred = std::function<bool(T)>;

    Pred eval;
    unsigned jumpSrc = 1;
    unsigned jumpTarget = 1;
public:
    PredBuilder(T value, unsigned jumpSrc = 1, unsigned jumpTarget = 1)
    : eval([=](T v){ return v == value; }), jumpSrc(jumpSrc), jumpTarget(jumpTarget)
    {}

    PredBuilder(Pred eval, unsigned jumpSrc = 1, unsigned jumpTarget = 1)
    : eval(eval), jumpSrc(jumpSrc), jumpTarget(jumpTarget)
    {}
}; 

template <class Src>
class Builder{ // Pattern Builder
    std::vector<PredBuilder<Src>> preds;

    template <class T>
    static void append(Builder& app_to, T last)
    {
        app_to.preds.emplace_back(PredBuilder<Src>(last));
    }

    template <class T, class... Args>
    static void append(Builder& app_to, T first, Args... rest)
    {
        app_to.preds.emplace_back(PredBuilder<Src>(first));
        app_to.append(app_to, rest...);
    }
public:
    template<class... Args>
    Builder(Args... args)
    {
        append(*this, args...);
    }

    unsigned countPreds()
    {
        return preds.size();
    }
};