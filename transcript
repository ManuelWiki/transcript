#include <vector>
#include <functional>
#include <utility>

template <class T>
class Token{
    using Pred = std::function<bool(T)>;

    Pred eval;
public:
    Token(T value)
    : eval([=](T v){ return v == value; })
    {}

    Token(Pred eval)
    : eval(eval)
    {}
}; 

template <class Src, class Target>
class AssocFn { // Associated Function
    std::function<Target(std::vector<Src>)> fn;

public:
    AssocFn(std::function<Target(std::vector<Src>)> f)
    : fn(f)
    {}

    AssocFn(std::function<Target(Src)> f)
    : fn([&](std::vector<Src> s){
        return f(s.back());
    })
    {}

    // For debugging
    Target call(std::vector<Src> p)
    {
        return fn(p); 
    }
};

template <class Src>
class TokenList{

    std::vector<Token<Src>> preds;

    // Overload for Src
    static void append(TokenList& app_to, Src last);

    template <class... Args>
    static void append(TokenList& app_to, Src first, Args... rest);

    // Overload for Pred
    template <class... Args>
    static void append(TokenList& app_to, std::function<bool(Src)> first, Args... rest);

    static void append(TokenList& app_to, std::function<bool(Src)> last);

    // Overload for TokenList
    template <class... Args>
    static void append(TokenList& app_to, TokenList first, Args... rest);

    static void append(TokenList& app_to, TokenList last);

public:
    //fw first argument is Pred
    template<class... Args>
    TokenList(std::function<bool(Src)> first, Args... rest)
    {
        append(*this, first);
        append(*this, rest...);
    }
    
    //fw first element is Src
    template<class... Args>
    TokenList(Src first, Args... rest)
    {
        append(*this, first);
        append(*this, rest...);
    }

    //fw first element is another TokenList
    template <class... Args>
    TokenList(TokenList<Src> first, Args... rest)
    {
        append(*this, first);
        append(*this, rest...);
    }

    // For debugging
    unsigned countPreds();
};

// Overload for Src
template<class Src>
void TokenList<Src>::append(TokenList& app_to, Src last)
{
    app_to.preds.emplace_back(Token<Src>(last));
}

template <class Src> template <class... Args>
void TokenList<Src>::append(TokenList& app_to, Src first, Args... rest)
{
    app_to.preds.emplace_back(Token<Src>(first));
    app_to.append(app_to, rest...);
}

// Overload for Pred
template <class Src> template <class... Args>
void TokenList<Src>::append(TokenList& app_to, std::function<bool(Src)> first, Args... rest)
{
    app_to.preds.emplace_back(Token<Src>(first));
    app_to.append(app_to, rest...);
}

template <class Src>
void TokenList<Src>::append(TokenList& app_to, std::function<bool(Src)> last)
{
    app_to.preds.emplace_back(Token<Src>(last));
}

// Overload for TokenList
template <class Src> template <class... Args>
void TokenList<Src>::append(TokenList& app_to, TokenList<Src> first, Args... rest)
{
    for(auto &p : first.preds){
        app_to.preds.emplace_back(p);
    }
    append(app_to, rest...);
}

template <class Src> 
void TokenList<Src>::append(TokenList& app_to, TokenList<Src> last)
{
    for(auto &p : last.preds){
        app_to.preds.emplace_back(p);
    }
}

// For debugging
template <class Src>
unsigned TokenList<Src>::countPreds()
{
    return preds.size();
}

template <class Src, class Target>
class Pattern {
    TokenList<Src> tokens;
    AssocFn<Src, Target> fn;
public:
    Pattern(TokenList<Src> tkns, AssocFn<Src, Target> f)
    : tokens(tkns), fn(f)
    {}
};

template <class Src, class Target>
class Syntax {
    std::vector<Pattern<Src, Target>> patts;

public:
    Syntax(std::initializer_list<Pattern<Src, Target>> patterns)
    {
        for (auto &p : patterns)
        {
            patts.emplace_back(p);
        }
    }

    // For debugging 
    unsigned countPatterns() {
        return patts.size();
    }
};